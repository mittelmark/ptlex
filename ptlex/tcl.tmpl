# end of TOP !- tcl -!
# Template of scanner

set yystate INITIAL
set yy_buffer ""
set yyleng 0
set buffer ""
set yytext ""

__VERBATIM__

proc BEGIN {state} {             
    #begins with given state
    set ::yystate $state
}

proc unput {chrs} {
    #adds given characters to the beginning of the input stream
    set ::buffer [string range $::buffer 0 $::yyleng]
    append ::buffer "$chrs[string range $::buffer $yyleng end]"
}

proc yymore {} {             
    #adds yytext at the beginning of the new matched text
    set ::yy_buffer $::yytext
}

proc yyless {num} {             
    #writes $num last characters of $yytext back to input stream and modifies $yytext/$yyleng
    set ::yytext [string range $::yytext [expr {$::yyleng-$num}] end]
    set ::yyleng [string length $::yytext]
    set ::buffer [string range $::buffer 0 $::yyleng]
    append ::buffer $::yytext 
    append ::buffer [string range $::buffer [expr {$::yyleng+$num}] end]
}

proc yylex {filename} {
    global yyleng yytext yychar yy_buffer yystate
    # begin verbatim part 1
__USERCODE__
__INIT__
    # end verbatim part 1
    # listing regexes
__REGEXES__
    # end patterns
    set bsize __BSIZE__
    set yychar 0
    set nbuff ""
    set nchars 0 ;#?? required
    set lbuffer "";   #lbuffer buffers length of longest matched regex
    set yy_rule 0
    if {$filename eq "-"} {
        set yyin stdin
    } else {
        if [catch {open $filename r} yyin] {
            puts stderr "Cannot open $filename: $infh"
            exit
        }
    } 
    set buffer [read $yyin $bsize]
    while {1} {
        set lbuffer 0
        set yy_rule 0
        set yytext ""
        incr yychar $yyleng 
        set buffer [string range $buffer $yyleng end]
        #if yyleng = 0 starts from beginning, else from yyleng till end
        if {[string length $buffer] < $bsize} {
            set nbuff [read $yyin $bsize] 
            if {[string length $nbuff] == 0 && [string length $buffer] == 0} { 
                break 
            } 
            append buffer $nbuff 
        }
        # begin pattern testing
        # rules setting
        # dynamic part 2
__MATCHES__
        # end pattern testing
        if {!$yy_rule} {
            set yytext [string range $buffer 0 0]
        }
        set yyleng [string length $yytext]
        set yytext "$yy_buffer$yytext"; #for yymore()
        set yy_buffer ""
        # begin actions
        # dynamic part 3
__ACTIONS__
        # end actions
    }
    close $yyin
} 
# begin main code
__MAIN__




